# -*- coding: utf-8 -*-
"""
Created on Mon March 13 21:09:03 2025

@author: Peter Rupprecht

This script was created to address the issue #66 at the CASCADE GitHub repository:
https://github.com/HelmchenLabSoftware/Cascade/issues/66

The script reads in files generated by Suite2p, computes dF/F, infers spike rates with CASCADE and saves the result back to disk.

The script is based on a custom script used to process hippocampal 2P imaging data recorded with GCaMP8m.
It might need to be adapted depending on the raw data (e.g., offset of the PMT or other peculiarities).

"""





cascade_folder = r'C:\\Cascade-October2023\Cascade-master'
data_folder = r'C:\\Data\Mouse4\Day_6' # contains subfolders with Suite2p outputs

import os, sys, glob
import matplotlib.pyplot as plt
from scipy.ndimage import percentile_filter
import numpy as np
import scipy.io as sio
import ruamel.yaml as yaml
yaml = yaml.YAML(typ='rt')

os.chdir(cascade_folder)

if 'Demo scripts' in os.getcwd():
    sys.path.append( os.path.abspath('..') ) # add parent directory to path for imports
    os.chdir('..')  # change to main directory
print('Current working directory: {}'.format( os.getcwd() ))

from cascade2p import checks
checks.check_packages()

from cascade2p import cascade # local folder
from cascade2p.utils import plot_dFF_traces, plot_noise_level_distribution, plot_noise_matched_ground_truth

# imaging frame rate
frame_rate = 30
# number of frames used for moving percentile filter to compute F_0
smoothing_window = frame_rate*60



all_folders = [data_folder]


for i,folder in enumerate(all_folders):
    
    print((i+1)/len(all_folders)*100)
    
    os.chdir(folder)
    
    this_folder = os.getcwd()
    
    # get the output from Suite2p
    fluorescence = np.load('F.npy')
    neuropil = np.load('Fneu.npy')
    iscell = np.load('iscell.npy')
    ops = np.load('ops.npy', allow_pickle = True)
    stat = np.load('stat.npy', allow_pickle = True)
    
    # get the anatomy image 
    mean_fluorescence = ops.flatten()[0]['meanImg']
    mean_fluorescence_enhanced = ops.flatten()[0]['meanImgE'] 

    # get indices of cell candidates identified as cells
    cell_indices = np.where((iscell == 1)[:,0])[0]
    # keep only selected cells
    selected_cells = fluorescence[cell_indices,:]
    neuropil = neuropil[cell_indices,:]
    num_cells = selected_cells.shape[0]
    
    # get ROI pixels and write all ROIs into a mask
    ROI_coordinates = np.zeros((len(cell_indices),2))
    ROI_mask = np.zeros((512,512))
    
    for reordered_index,index in enumerate(cell_indices):
        
        ROI_coordinates[reordered_index,0] = np.nanmean(stat[index]['xpix'])
        ROI_coordinates[reordered_index,1] = np.nanmean(stat[index]['ypix'])
        for pixelx,pixely in zip(stat[index]['xpix'],stat[index]['ypix']):
            ROI_mask[pixely,pixelx] = reordered_index + 1
    
    
    # plot ROI mask
    # plt.figure(12); plt.imshow(mean_fluorescence_enhanced)
    # for k in ROI_coordinates:
    #     plt.plot(k[0],k[1],'+k','MarkerSize',1)
    

    # perform dF/F computation using a moving percentile approach
    dFF = np.zeros((selected_cells.shape))
    for k in range(num_cells):
        # subtract neuropil with a factor of 0.15 (may also use 0.00, since neuropil contamination for HC 2P imaging not very strong typically)
        corrected_fluorescence = selected_cells[k,:] - 0.15*neuropil[k,:]
        
        F0 = percentile_filter(corrected_fluorescence,15,size=smoothing_window)
        
        dFF[k,:] = (corrected_fluorescence - F0)/(F0)
        if np.mod(k,50) == 0:
            print((k+1)/num_cells*100)
            

    # infer spike rates
    os.chdir(cascade_folder)

    model_name = 'GC8_EXC_30Hz_smoothing50ms_high_noise'
    cascade.download_model( model_name,verbose = 1)
    spike_prob = cascade.predict( model_name, dFF, verbosity=1 )
    
    
    # save dFF and deconvolved traces as a MATLAB *.mat-file
    
    os.chdir(this_folder)
    
    matlab_filename = os.path.join(this_folder, 'Extracted_dFF_deconvolved.mat')
       
    sio.savemat(matlab_filename, {'dFF': dFF,'spike_prob': spike_prob,'ROI_mask':ROI_mask,'ROI_coordinates':ROI_coordinates,'mean_fluorescence':mean_fluorescence,'mean_fluorescence_enhanced':mean_fluorescence_enhanced})


    os.chdir('..')
    
    
